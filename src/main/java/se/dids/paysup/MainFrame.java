/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 2010-dec-13, 16:04:55
 */

package se.dids.paysup;

import java.awt.event.KeyEvent;
import java.io.File;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author david
 */
public class MainFrame extends javax.swing.JFrame {
  private static final ResourceBundle paysupResource = ResourceBundle.getBundle("PaysupResource");

    boolean firstRun;
    PaymentFile paymentFile;

    /** Creates new form MainFrame */
    public MainFrame(boolean firstRun) {
        this.firstRun = firstRun;
        initComponents();
        adjust();
    }

    public void showFrame() {
      setVisible(true);
      if (firstRun) {
        NewDatabaseDialog form = new NewDatabaseDialog(this, true);
        form.setVisible(true);
      } else {
        File oldFile = new File((String)Configuration.getInstance().getConfig().getProperty("default_database"));
        DbHandler.getInstance().initialize(oldFile);
      }
      load();
      accountTypesComboBox.requestFocus();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    supplierList = new javax.swing.JList();
    nameTextField = new javax.swing.JTextField();
    accountTextField = new javax.swing.JTextField();
    amountTextField = new javax.swing.JTextField();
    dateTextField = new javax.swing.JTextField();
    referenceTextField = new javax.swing.JTextField();
    accountTypesComboBox = new javax.swing.JComboBox();
    updateButton = new javax.swing.JButton();
    clearButton = new javax.swing.JButton();
    totalAmountTextField = new javax.swing.JTextField();
    generateButton = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    paymentsTable = new javax.swing.JTable();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    newDatabaseMenuItem = new javax.swing.JMenuItem();
    preferencesMenuItem = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    supplierList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(supplierList);

    nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        nameTextFieldKeyTyped(evt);
      }
    });

    accountTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        accountTextFieldKeyTyped(evt);
      }
    });

    amountTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        amountTextFieldKeyTyped(evt);
      }
    });

    dateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        dateTextFieldKeyTyped(evt);
      }
    });

    referenceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        referenceTextFieldKeyTyped(evt);
      }
    });

    accountTypesComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        accountTypesComboBoxKeyTyped(evt);
      }
    });

    updateButton.setText(paysupResource.getString("ADD")); // NOI18N
    updateButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateButtonActionPerformed(evt);
      }
    });

    clearButton.setText(paysupResource.getString("CLEAR")); // NOI18N
    clearButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearButtonActionPerformed(evt);
      }
    });

    totalAmountTextField.setEditable(false);
    totalAmountTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

    generateButton.setText(paysupResource.getString("GENERATE")); // NOI18N

    paymentsTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Due Date", "Type", "Account No", "Name", "Amount", "Reference"
      }
    ));
    paymentsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane2.setViewportView(paymentsTable);

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("PaysupResource"); // NOI18N
    jLabel1.setText(bundle.getString("MainFrame.jLabel1.text")); // NOI18N

    jLabel2.setText(bundle.getString("MainFrame.jLabel2.text")); // NOI18N

    jLabel3.setText(bundle.getString("MainFrame.jLabel3.text")); // NOI18N

    jLabel4.setText(bundle.getString("MainFrame.jLabel4.text")); // NOI18N

    jLabel5.setText(paysupResource.getString("DUE DATE")); // NOI18N

    jLabel6.setText(paysupResource.getString("REFERENCE")); // NOI18N

    fileMenu.setText(paysupResource.getString("FILE")); // NOI18N

    newDatabaseMenuItem.setText(paysupResource.getString("NEW DATABASE...")); // NOI18N
    newDatabaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newDatabaseMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(newDatabaseMenuItem);

    preferencesMenuItem.setText(paysupResource.getString("PREFERENCES")); // NOI18N
    preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        preferencesMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(preferencesMenuItem);

    exitMenuItem.setText(paysupResource.getString("EXIT")); // NOI18N
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
              .addComponent(accountTypesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                  .addComponent(updateButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(clearButton))
                .addComponent(jScrollPane2)
                .addComponent(totalAmountTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createSequentialGroup()
                  .addComponent(accountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(referenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addComponent(generateButton))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel2)))
        .addContainerGap(146, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(45, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(19, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(jLabel2)
          .addComponent(jLabel3)
          .addComponent(jLabel4)
          .addComponent(jLabel5)
          .addComponent(jLabel6))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(accountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(accountTypesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(referenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(updateButton)
          .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(totalAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(generateButton)
        .addGap(26, 26, 26))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void newDatabaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDatabaseMenuItemActionPerformed
        NewDatabaseDialog form = new NewDatabaseDialog(this, true);
        form.setVisible(true);
    }//GEN-LAST:event_newDatabaseMenuItemActionPerformed

    private void registerInput() {
      // Is this supplier already existing?
      AccountType aT = (AccountType)accountTypesComboBox.getSelectedItem();
      Supplier sup = Supplier.load(aT.getId(), accountTextField.getText());
      if (sup == null) {
        sup = new Supplier(aT.getId(), accountTextField.getText(), nameTextField.getText());
        sup.insert();
      } else {
        // Check if name has changed
        if (! sup.getName().equals(nameTextField.getText())) {
          sup.setName(nameTextField.getText());
          sup.update();
        }
      }
      updateSupplierList();
      if (paymentFile == null) {
        paymentFile = new PaymentFile(DateHelper.toIso8601(new Date()), "NEW");
        paymentFile.insert();
      }
      SimpleDateFormat sDF = new SimpleDateFormat("yyyyMMDD");
      Date dueDate = null;
      try {
        dueDate = sDF.parse(dateTextField.getText());
      } catch (ParseException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
      }
      double amount;
      try {
        amount = NumberFormat.getInstance().parse(amountTextField.getText()).doubleValue();
      } catch (ParseException ex) {
        JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("PaysupResource").getString("AMOUNT_FORMAT_ERROR"));
        amountTextField.requestFocus();
        return;
      }
      Payment payment = new Payment(paymentFile.getId(), dueDate, aT.getName(), accountTextField.getText(), nameTextField.getText(), amount, referenceTextField.getText());
      payment.insert();
      addToPaymentTable(payment);
      resetInput();
    }

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
      registerInput();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
      resetInput();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
      System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void accountTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accountTextFieldKeyTyped
      if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        try {
          AccountType aT = (AccountType)accountTypesComboBox.getSelectedItem();
          selectSupplier(aT.getId(), accountTextField.getText());
        } catch (NotFoundException nfe) {
          nameTextField.requestFocus();
        }
      }
    }//GEN-LAST:event_accountTextFieldKeyTyped

    private void accountTypesComboBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accountTypesComboBoxKeyTyped
      if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        accountTextField.requestFocus();
      }
    }//GEN-LAST:event_accountTypesComboBoxKeyTyped

    private void amountTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountTextFieldKeyTyped
      if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        dateTextField.requestFocus();
      }
    }//GEN-LAST:event_amountTextFieldKeyTyped

    private void dateTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateTextFieldKeyTyped
      if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        referenceTextField.requestFocus();
      }
    }//GEN-LAST:event_dateTextFieldKeyTyped

    private void referenceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_referenceTextFieldKeyTyped
      if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        registerInput();
      }
    }//GEN-LAST:event_referenceTextFieldKeyTyped

    private void nameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyTyped
      if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        amountTextField.requestFocus();
      }
    }//GEN-LAST:event_nameTextFieldKeyTyped

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed
      PreferencesDialog form = new PreferencesDialog(this, true);
      form.setVisible(true);
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

  private void selectSupplier(int accountTypeId, String accountNo) throws NotFoundException {
    DefaultListModel listModel = (DefaultListModel)supplierList.getModel();
    Enumeration e = listModel.elements();
    while (e.hasMoreElements()) {
      Supplier sup = (Supplier)e.nextElement();
      if (sup.getAccountTypeId() == accountTypeId && sup.getAccountNo().equals(accountNo)) {
        supplierList.setSelectedValue(sup, true);
        return;
      }
    }
    throw new NotFoundException();
  }

  public void updateSupplierList() {
    DefaultListModel listModel = new DefaultListModel();
    listModel.clear();
    List l = Supplier.loadAll();
    for (Iterator iter = l.iterator(); iter.hasNext();) {
        listModel.addElement((Supplier)iter.next());
    }
    supplierList.setModel(listModel);
    supplierList.addListSelectionListener(new ListSelectionListener() {

      public void valueChanged(ListSelectionEvent e) {
        if (! e.getValueIsAdjusting()) {
          JList jL = (JList)e.getSource();
          Supplier selectedSup = (Supplier)jL.getSelectedValue();
          if (selectedSup != null) {
            fastType(selectedSup);
          }
        }
      }
    });
  }

  public void addToPaymentTable(Payment p) {
    DefaultTableModel tableModel = (DefaultTableModel)paymentsTable.getModel();
    tableModel.addRow(p.getRowData());
    double currentAmount = 0.0;
    try {
      currentAmount = NumberFormat.getInstance().parse(totalAmountTextField.getText()).doubleValue();
    } catch (ParseException ignored) {
    }
    currentAmount += p.getAmount();
    NumberFormat nF = NumberFormat.getInstance();
    nF.setMaximumFractionDigits(2);
    nF.setMinimumFractionDigits(2);
    totalAmountTextField.setText(nF.format(currentAmount));
  }

  private int getAccountTypeIndex(int accountTypeId) {
    int size = accountTypesComboBox.getModel().getSize();
    for (int i = 0; i < size; i++) {
      AccountType aT = (AccountType) accountTypesComboBox.getModel().getElementAt(i);
      if (aT.getId() == accountTypeId) {
        return i;
      }
    }
    throw new RuntimeException(paysupResource.getString("ACCOUNT TYPE NOT FOUND."));
  }

  private void fastType(Supplier sup) {
    accountTypesComboBox.setSelectedIndex(getAccountTypeIndex(sup.getAccountTypeId()));
    accountTextField.setText(sup.getAccountNo());
    nameTextField.setText(sup.getName());
    amountTextField.requestFocus();
  }

  private void load() {
    updateSupplierList();
    List l = AccountType.loadAll();
    for (Iterator iter = l.iterator(); iter.hasNext();) {
      accountTypesComboBox.addItem((AccountType)iter.next());
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField accountTextField;
  private javax.swing.JComboBox accountTypesComboBox;
  private javax.swing.JTextField amountTextField;
  private javax.swing.JButton clearButton;
  private javax.swing.JTextField dateTextField;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JButton generateButton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JTextField nameTextField;
  private javax.swing.JMenuItem newDatabaseMenuItem;
  private javax.swing.JTable paymentsTable;
  private javax.swing.JMenuItem preferencesMenuItem;
  private javax.swing.JTextField referenceTextField;
  private javax.swing.JList supplierList;
  private javax.swing.JTextField totalAmountTextField;
  private javax.swing.JButton updateButton;
  // End of variables declaration//GEN-END:variables

  private void adjust() {
    paymentsTable.getColumnModel().getColumn(0).setPreferredWidth(75);
    paymentsTable.getColumnModel().getColumn(1).setPreferredWidth(50);
    paymentsTable.getColumnModel().getColumn(2).setPreferredWidth(75);
    paymentsTable.getColumnModel().getColumn(3).setPreferredWidth(150);
    paymentsTable.getColumnModel().getColumn(4).setPreferredWidth(50);
    paymentsTable.getColumnModel().getColumn(5).setPreferredWidth(150);
  }

  private void resetInput() {
    accountTypesComboBox.setSelectedIndex(0);
    accountTextField.setText(null);
    nameTextField.setText(null);
    amountTextField.setText(null);
    dateTextField.setText(null);
    referenceTextField.setText(null);
    accountTypesComboBox.requestFocus();
  }

}
